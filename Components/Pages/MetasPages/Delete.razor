@page "/D_Metas/{MetaId:int}"
@rendermode InteractiveServer
@inject MetasServices MetasServices
@inject NavigationManager NavigationManager

<PageTitle>Eliminar</PageTitle>

<EditForm Model="metas" OnValidSubmit="Eliminar">
    <DataAnnotationsValidator/>
    <div class="card">
        <div class="card-header">
            <h1>Eliminar</h1>
        </div>
        <div class="card-body">
            <!-- Para la fecha -->
            <label class="form-label">Fecha</label>
            <InputDate @bind-Value="metas.Fecha " class="form-control" disabled />
            <ValidationMessage For="@(() => metas.Fecha  )" /> 

            <!-- Para la observaciÃ³n -->
            <label class="form-label">Descripci&oacute;n</label>
            <InputText @bind-Value="metas.Descripcion" class="form-control" disabled/>
            <ValidationMessage For="@(() =>metas.Descripcion)" />

            <!-- Para el monto -->
            <label class="form-label">Monto</label>
            <InputNumber @bind-Value="metas.Monto " class="form-control" disabled/>
            <ValidationMessage For="@(() => metas.Monto)" />
        </div>
        <div class="card-footer d-flex justify-content-center">
            <button type="submit" class="btn btn-outline-danger"><i class="bi bi-trash"></i> Eliminar</button>
        </div>
    </div>  
</EditForm>
@code {
    [Parameter]
    public int MetaId { get; set; }

    public Metas metas = new Metas();

    protected override async Task OnInitializedAsync()
    {
        metas.MetaId = MetaId;
        await Buscar();
    }

    public async Task Buscar()
    {
        var Encontrado = await MetasServices.Buscar(metas.MetaId);

        if (Encontrado != null)
            this.metas = Encontrado;
    }

    public async Task Eliminar()
    {
        if (await MetasServices.Eliminar(this.metas))
        {
            Nuevo();
            NavigationManager.NavigateTo("/C_Metas");
        }
    }

    public void Nuevo()
    {
        this.metas = new Metas();
    }
}