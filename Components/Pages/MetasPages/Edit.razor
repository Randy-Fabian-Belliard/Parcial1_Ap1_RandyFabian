@page "/Ed_Metas/{MetaId:int}"
@rendermode InteractiveServer
@inject MetasServices MetasServices
@inject NavigationManager NavigationManager

<PageTitle>Editar</PageTitle>

<EditForm Model="meta" OnValidSubmit="Guardar">
    <DataAnnotationsValidator/>
    <div class ="card">
        <div class="card-header">
            <h1>Editar</h1>
        </div>
        <div class="card-body">
            <!-- Para la fecha -->
            <label class="form-label">Fecha</label>
            <InputDate @bind-Value="meta.Fecha" class="form-control"/>
            <ValidationMessage For="@(() => meta.Fecha )" />

            <!-- Para la observaciÃ³n -->
            <label class="form-label">Descripci&oacute;n</label>
            <InputText @bind-Value="meta.Descripcion" class="form-control"/>
            <ValidationMessage For="@(() => meta.Descripcion )" />

            <!-- Para el monto -->
            <label class="form-label">Monto</label>
            <InputNumber @bind-Value="meta.Monto" class="form-control"/>
            <ValidationMessage For="@(() => meta.Monto )" />
        </div>
        <div class="card-footer d-flex justify-content-center">
            <button type="submit" class="btn btn-outline-success"><i class="bi bi-pencil-square"></i> Editar</button>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public int MetaId { get; set; }

    public Metas meta = new Metas();

    protected override async Task OnInitializedAsync()
    {
        meta.MetaId = MetaId;
        await Buscar();
    }

    public async Task Buscar()
    {
        var metasEncontrado = await MetasServices.Buscar(meta.MetaId);

        if (metasEncontrado != null)
            this.meta = metasEncontrado;
    }

    public async Task Guardar()
    {
        if (await MetasServices.Guardar(this.meta))
        {
            Nuevo();
            NavigationManager.NavigateTo("/C_Metas");
        }
    }

    public void Nuevo()
    {
        this.meta = new  Metas();
    }
}